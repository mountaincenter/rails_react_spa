version: '2.1'
orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@2.3.0
  aws-s3:  circleci/aws-s3@1.0.11
executors:
  default:
    docker:
      - image: cimg/python:3.10-browsers
    working_directory: ~/repo
commands:
  npm_install:
    steps:
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "./frontend/react-app/package.json" }}
            - v2-dependencies-
      - run:
          working_directroy: frontend/react-app
          command: cd frontend/react-app && npm install
      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ checksum "./frontend/react-app/package.json" }}
jobs:
  api_test:
    docker:
      - image: cimg/ruby:3.1.2-browsers
        environment:
          RAILS_ENV: test
          DATABASE_HOST: 127.0.0.1
      - image: cimg/mysql:8.0.28
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: myapp_test
    working_directory: ~/myapp
    steps:
      - checkout
      - run:
          name: "bundle install"
          working_directory: backend
          command: bundle install --path vendor/bundle
      - run:
          name: yarn install
          command: yarn install --cache-folder ~/.cache/yarn
      - run:
          name: "waiting DB start"
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 1m
      - run:
          name: "initialize DB"
          working_directory: backend
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate
      - run:
          name: "RSpec"
          working_directory: backend
          command: bundle exec rspec
  build:
    executor: default
    steps:
      - checkout
      - npm_install
      - run:
          command: cd ./frontend/react-app && npm run build
      - persist_to_workspace:
          root: ./frontend/react-app
          paths:
            - "*"
            - ".*"
  deploy:
    executor: default
    steps:
      - attach_workspace:
          at: ~/repo
      - aws-s3/sync:
          arguments: |
            --acl public-read \
            --acl bucket-owner-full-control \
            --cache-control "max-age=86400"
          from: build
          to: s3://web.ymnk.fun
          overwrite: true
workflows:
  rails-deploy:
    jobs:
      - api_test:
          filters:
            branches:
              only: main
      - aws-ecr/build-and-push-image:
          requires:
            - api_test
          aws-access-key-id:  AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          context: aws
          create-repo: true
          path: ./backend
          dockerfile: /prd/Dockerfile
          region: "${AWS_DEFAULT_REGION}"
          registry-id: AWS_ID
          repo: "${REGISTRY_NAME}"
          repo-scan-on-push: true
          skip-when-tags-exist: false
          tag: "latest"
          extra-build-args: '--build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY}'
      - aws-ecs/deploy-service-update:
          context: aws
          requires:
            - aws-ecr/build-and-push-image
          family: 'tf-app'
          service-name: 'tf-app-service'
          cluster-name: 'tf-app'
          container-image-name-updates: 'container=rails,image-and-tag=${AWS_ECR_ACCOUNT_URL}/tf-app:${CIRCLE_SHA1}'
  nginx-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          aws-access-key-id:  AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          context: aws
          create-repo: true
          path: ./backend
          dockerfile: /prd/nginx/Dockerfile
          region: "${AWS_DEFAULT_REGION}"
          registry-id: AWS_ID
          repo: "nginx"
          repo-scan-on-push: true
          skip-when-tags-exist: false
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          context: aws
          requires:
            - aws-ecr/build-and-push-image
          family: 'tf-app'
          service-name: 'tf-app-service'
          cluster-name: 'tf-app'
          container-image-name-updates: 'container=nginx,image-and-tag=${AWS_ECR_ACCOUNT_URL}/nginx:${CIRCLE_SHA1}'
  react-build-deplpy:
    jobs:
      - build:
      - deploy:
          requires:
            - build
